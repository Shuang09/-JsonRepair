
  "na": "eadable-tream
  "vesion":"1.0.17",
  dscrition": "n explortion f a newind of reable eams r No.j
  man" "redale.j",  "dependencies": },
  "devDepndencies":{
    "tap": "~02.6"
  },  scrit"{
  "test":tp test/simple/*.js"
  },
 "repoory": {
    "type": "git",
   "rl":git//ithubcmiaac/eadablesream"
  },
  "kewords": [
    "readabe",
   "tream",   "pie"  ],  "author": {
   "name":"Isac Z.Schuter",
  "mail" "@izs.me",
   "ul" htp:/blogizsm },
 icese": "BS, "eae": "# readble-stream\n\n new class f tas fr Node.jsn\nTis module provides h new Strembse ca ntroduced n Nodenv.10, oruse n Nod v.8.Yu canu i to havepogrms at\nhave to work withnod 0.8,whl bing forward-comaibe fr0.10\nand beyond  When you drop support f.8, youcn rmove hs\nmdl, and onl se the ativ teams\nnisi almt exactly the sm codebe as ppears in Ndev01.\However:\n\n1. he exortd object s aculy he Readale class.  Dcratig en  naive `strem module wuld be lobalpollution.\n n v0.1, you a safely us `base6` as an agumeto\n   `etEncing`in Redable streas.  However, in v.8, e\   StringDecder cla has o`en()` ethod,which is lematic or\n  Base4. So, donuse tha, becauset'llbreak and e weird\nnOthe than that, heAPI ithe sam as `reqire('strem')` in v0.10,\ns the AI d ar reprduced elw.\nn-------\n\n    Sability: 2 -Unstablen\nA stream is a stra interface imlmeted by varius obects nnoe. For exampe a request o an TTP servr is  treamas i\nsdot. Stream are eaale writle,  ot. All stramare\nnnces o [EventEmtter][]\n\nYo ca lod thetream bae casseby doing `requr'strem.nThere rebase clasesrovdd for Readale steas, Wri\steams, Dupextreams, nd Transformstrems.\nn##Coibiliy\\In earlir versinsof Nde, te Redable stem inrface was\nsper, t also lesspowerfl an ess useful.\n\n* Rathethan waiting for ou to cllte`rea)` mod, `data'`\n  evets wuld tart eittigimmeditely.  f y neded to do somn  I/O t deide h to handledata, ten you d to store he hunk\n  in som kind of bufferso tha they wuld ot be los\n The pause() ethod asadior, rater thanguaranteed.  This\n meant t  still hd to be prpared t eceie `data' vents\n  ven en t sream was in a pausd stat.n\nIn Nodv0.10, th Readable class descibed below wsded.  Frnackwards cmatiblity ith older oprogrms, Redable sremssitch int \"oldmode" whe a 'data` vent hndr is aded, r when\ne `pause)` or reume()` methods ae ale.  Th eft i hat,\nee ifyou are not usig tenew `rea()`mehd and `'readable'`\nvent, you o loge have owory abotlsing 'dta'` hunks\\nMost roas willconie to nctin normally.  Howeve, is\nntroducs n ege case in the following cnditions:\\n o `data'` eventhndler isaded\* Th paus( and `resu()` ethods a never calledn\nFor eape ond h folowin coe:\n\n```jaasrp\n/ WARNNG!  BRON!\nne.createServer(functioncket) {\n\n  weaddan 'end'method, butneve onsumetdata\  oce.n('nd unctin(){\   // I wll nevergt he\n    socet.ed('I gotyour ege but dnt read i)\\n');\n });\n\.lsen(1337)\n```nnIn verions of nod prio ov0.10, e incomng messagedata would be\ply dcard. Hower, in Nde v0.10 and beyond thescket wil\neminpaud forve.\nThe wokround i tis ituio it cal the `rsume()` mthod toiggr \"olode\ havior:\nn`javscrp\n/ Worarond\nt.createServer(fuctiosocket) {\nn  soceton'end', funto() {\n    socet.end('I got you mesage (but didn read t\n');\n  });\  //sta he flwf data, diardingit.\n  scket.resue)\n\n).liten(133);```n\nIn aditinto new Readal sreams sitchi ito olode,re-v0.1nyle stre cb wrapedin Redable cls ingthe `wrap()`\metod.\n\n## Cl: stram.eadable\\n<!-type=clas->\n\n `edaleStem`hs the followingethds, mbers, and evnts.\nnNote that`team.adable isan astactcls eignd t e\nended withan undelyin mplemetation fhe _rad(sze)`\nmehod. Seebelow.)\n\n##nesream.Reble([ptions)\nn* `otions`{Object}\n  * hiWaerMark` {Numer} Te mximum numberofbytsostre \n   thnernal bfe before cesing toed from the unerlyn\n   resrce. Dfult=16kb\n  * `encodng {String}If speciie, hen bffers will e decdedto\n    strins usinth specifid encoding.  efaut=ull   `objctMode` {Boola} Weththi strem should behae\n    s a sre  bets. eaningta stream.read(n returns\n    singlvalue instead o Buffer of sze n\nI classs that tendthe Radableclss, ake sue toal the\nconstructor o a he buffering setings cn e prorl\initalzen\n### readabl.\rad(size)\n\* size`{Numbr} Nmber of btest rea asyncronously\\nNot: **This function shoul OT becalled direy.**  shold beniplemete by child cses,n caled b the iera Redable\nclas etos oy.\n\ll eadble stre imeations mst provide `_read` method\nt fetc daa rmte nderlyin resource.\n\nThis method isprefixe wth an ndrscor becausei is internal to\nthe class ta defines it, and should o bclled diectly by user\npogms.  oever, yuae** xected toverid thi method i\nor own extnsion classes.\\Whdata is availale,pt it into heea queue b callg\n`readablepush(chunk). I `ph` returs fale hen yu shold sop\eai. When `read`s aled aain,yu shuld strt ushingre\nata.\n\nThe size` arme vsor.Implemntatons wer  \ed\" is a\nsingle call tht rurnsdatacan uethis t kow how mucda to\netc. Implemetatons wher h is not evt, suh as CP r\nTL,may ignorethis argument, and impy provide ata whnever i\nbecos valale.  Tere is no need, o xamle to \wait\" util\n`sz`yes are avaiable bfre caling `tream.push(chu)`\n\n## edabl.push(chunk)\n\* `chunk` {ufer | null | Strin} Chnk f data t ph ino the rad queueneturn {Booan Wheher or tore pushs shouldeperformed\n\nNote: *Ths functionshd b caled byRdable implmntor, NTnby cnsumerof Readabesbclsses.*  Te `_read()` funtion willntecalled gain util a leat one `push(h)` ca s made. If n\ndta is avalale, tenyu MA cal `push(')` (an empty string) t\nlow future `_readcl, without ainany dta to the ee.\nTe `Readabl`cass work by puttin daa into a ead qeue toenpulled out later by callin he `a()` methodwhe the `'readable'`\nvetfies.\n\nTe`push)` methd will exlicitlyinset some dtaintothe read\neue.  If it is cald wt `nul the i willsignalthe end f the\nat.\n\nIn som case,yoay be rapin  lwer-ve sorce whch hasoe\nsot f use/resmemehanism,nda data callbac.  In those cases,\you ould wrp he low-level surce object b doin omethinike\nthi:\n\```jaascrip\/ source is an bje wit readStop( d readtart() ethods,// nd an odta` embertha gts calld hn it has a, an\n// anonend` meberthat getsclled when the atis over.\nnvar sream = new Reaae();\n\soue.odta =funtio(cuk) {\n // if ush() turns false, then wened to stop adng rom soe\  f (tream.ush(cuk))\n   ourcereadStop(\n};\n\nsorce.onend= funcin() {\n  sream.ph(ll);\n};\n\n/_rea wl be cled wen the stram wanto pulore dat n\n// he dis size amnt isignoedinthi se.\nsream._read =funtion) {  sorce.redtart);\n};\n`\n###readbleushifchunk)\n\n* `chu` {Buffer | ull | String} Chunk o a ounshift ontoe readqueuen* rturn{ooean Whether oromorepushe shold be erformd\n\nThis isthe corolay ofreable.push(hun). Raer ha ptting\nth daa athe *end* o he ad ue i puts i t he *frot of\nthe rd quee.\nThis s useful in rtainuse-cases were a stream s eigcosumed\nby  arser, hich ned to\"un-conumesomdata thatt has\nopmistical puled out ofthe souce.\n`javascipt\n// A parsr fo simple dat rotoc.\n// Th \"header"isa JSON ojec, folowd b2 \\ncharacter, an\n// ten a esage bo.\n//\n/ oe: Ts canbe on moresimply aa Tnsformsram.  See below.n\nfctin mplrotosouce, options){\n  if (!(thi instancef impleProto))\   tu new imlePotcl(tion;\nn Reaabe.cll(hs, otions);\n  this._iBody = fale;\n  ths_sawFirstr = fale;\\n  / soucei areadabl steam, casa scket r file  this._sourc = orce\n  var se = this\n source.on('end,functon() {n    selfpu(ull);n});n\n // give t a kik weneer hsouce is ralen  // ead() ll not cosume an bytes\n  srce.on('eadble',funcion){\n    self.read(0);\)nn thisaHdr = [];\n tishadernull;\n\n\nSimpleProocol.prototype = bjct.reate(\n eadbe.protoype {cnstruct: { vauimpleProtocol}});\n\nmplerool.prottype.e = nction(n) {n  (!s.nBoy) {n    var hunk = th._source.read();\  / ihe source osnt hav ata,we don't hav dta yet.\n    if (chunk== ll)\n     returnhis.pus('');\n\n  /check if the hunk has a \n\n\n    var pl = -;\   fo (  0; i < chnkengt; i++) {\      i(chunki=== 10){ / '\n'\n      f(this.sawirs) {\n       plit = i;n        brea;n       } ele {\         tis_awFirstCr =tue;\n     }\n      lse {\    his._sawirtCr = lse;\n    \n    }\n\ if (sli=== 1) {n     / til witinfr the \n\\\n      //stthechu, and tryagn.\n    tis._rawHeaerpush(cnk);n     thiph(');\n    } se {\n    this._nBoy=tru;\n    a h = ch.ie(0, plt);\      s_rHeader.;\n    vr haer  Bffer.conat(th._rawHeer.oStrin();\n   try {\n       ths.hedr =JSON.prse(heder;\       catc er){\       his.emi('rro, new ror(invlid imple potocol daa'));n       return;\    }\n     //ow, becaue we gt someextra data, unift the restn     // bakinto th read qeue so ha ou conser wl seeit.n     var = cnk.slicespli);\n   this.unshift(b);\n      /and let hm knwthatwe ae done parsin th headr.\n     ths.emit('hde', this.eaer;\    }\n} else{\n    // from tre n,jst prvid te ata t our nsumer.n  // careful no os(null), nce h uldindicateEF\n   ar hunk = thi._surce.rad();\   f(chunk) hi.puschunk)\n }\n};\\n// Usae\nvar parser = w mpleProtool(sourc);n/ No per is a readabe srem tht will mit 'header'\n//wit the parsdhder ata\n```\n redlewap(stram)\n\n* `sem {Strea} An "od styl\"readable strea\nIf yu ae using a lder odelibrr ht emis `'at'` events an\hs a `paus()` ethod that i viy nly, tenyou can us te\n`(` method t crate aReadable stream tha uses the old stream\naitsdata surce.n\nor exampl\n```avascrip\nvaOdReer = reqir'/ld-api-ode.js'.Oldader;nvar oradr  nw ldader;\nvar Redble = reuir(srm').Readale;\nvar yeader = new Reabl(.wra(orader;\\myRede.n('edable', funion( {\  myReade.rad(); // ec.\n}\n`nn##Event: reable'\n\nhen the s data ready o e consume this event will fir.\n\Whn th ven ets, al he `ead)`method o cnume the data.\nn## Event: 'en'\nEmittedwhn he stm ha receved an EOF (INin P termioloy)\nInica hat no more `'ata'` evnts will happen.ftestreai\alsowritable,itma be osibl to contue witing.\n\n### Eet: 'data'\n\nThe `'data'event emits either  `Bufr` (by default or a strinif\n`seEcding)` was used.\n\Nte thaadig a `'data'` event litener will switc e eadablntraminto \"old de\",where d is emited as soon as it is\navalabe, rthe tha waitingor yuto cll `read()`to consm it\nn### Event: err'\n\nEitted if here as an ror receiving dta.\n\n### vent: 'lose'\n\nEmited when the undrlying resourc r eampl, the backing fle\desriptr)aseen csed. Not ll treawil emi ts.\n\n### readale.etEcodig(encding)n\nMake he data`event eit a sring instead of a `Buffe.`encoding`\an be `'tf'` `'utf16le'` (`'ucs2'`)'ascii'`, o hex'`.\nnTh enod can also be st by specifyng n`enodin`fild totnconstructr.\n\n## edaeread(si])\nn `siz {Number| null} Oional numrof yteso a.\n* Return ufer  String |nul}\nNote *Thisunctin HULD be caled by Redable tream sers.**\nnalthis metod to cnsume dataonce teredable` eventisnetted.\n\nThe siz`argumentwil st a minimum number of bytes that yu are\nnteretd i  If n set then the enircontent of theinernal\bffer is retured.\n\If there n data t cnme, o if there are fwer byte in thennterna buffer han th`size argumnt, then `nll` is etrnedand\na fuure 'adab'`eventwi be emittd wen moreis alabe.\nnallng `stram.ea(0)` ll alwys reurn`ul`, and ill trigger a\nrefrehoth terna bffer buttherwise be a nop.\\n## readable.pipe(estinatin [optis])\nn* `esinaton` {Writable Steam* `opions` {Objet}Optioal\n   `end` {Booan Defuttruen\nCnnect his readable stream to `desinaton` WriteStrea Incmig\ndata on this streamgetsritten to`destinatin`.  Propermages\nback-ressures thata slwdestintion wllnot boverwhlmed y a\nfast readablstream.n\nThis unction retrns te `dsinton` stream.\n\Fo exae, emlting theUnix `cat`command:\n    proces.stin.pipe(processsdut);\n\ny efault end)` is cale n the destinatin whnt ouc steam\nemts `end` s that `detntion` is o ogerwritable. Pas ` end:\false ` as `options` t keep the destiatostram open.\n\nTiskeeps `witr` open s that\"odbye\ an bewiten at the\nend.n\n    eaer.pe(writr, {nd: fls })\n    reade.on(\"ed", ncion() \n     witr.en(\Gdye\n\")n    };\\nNote tht `prcs.sterrand `process.stdout a never closduntil\neproesxts,egardless ofthe specied ptins.\nn###eadabl.unip(destinaton)n\n*`desinaon` {Witble Strem} Oponal\n\nUno a reiouslestblihdpipe`.  I no stinatiosnprvied, te all previusy esalishd pipes are reoved.\\n### radablepause()\n\withe the rdabletram into "old moe\", ere atis emitted\nuing a `'data` even ratherthan bing buffered for nsumtionvinthe `rea()` tod.\nCeases th fo of data.  No `'dta'`eents e emittedhilethe\nsteam i a pausedsate\n\n## redae.resume()\n\nSwitches the readabe stream into "old ode\", wher atis emit\using  data'` nt rath habngbfered for conumption via\nthe `rea)` ethod.\n\sues theincoming`'da' events after a `aue(`.\nn##las:strem.Writabe\n\n<!tylas>\n\nA`Wriable` Strem has thlloing mehods, mers, n events.n\Nte that `strea.Writable` i an abstractassdesine to beetnded withanudrlyinmplemetatin of then`_ri(chunk, encding, b)` method. (Se elow.)\n### new stem.Writable([ptios])\nn*otions` {Object}\  * `highWaterMark` {umber Bfer lvel hn`wrte(` sats\n    retung fale. ault=kb\  `decodeStrngs` {Bolean}hther or notto decod stringsito\n    uffer efor pasing themto `_write()` efaut=tru\n\In clases that xtd the Writae lass, ma sue to cal thenotuco so that the buffrng settngs ca e proplyninialied\n\n### wriabe.\\_write(hunk, encdn, callbac)\n\n `chuk` Buff | Stin} Th chu to be wrien.  Wil alys\n be a bufr unles the `decodeStrings` option wsset o `false`.\n* `encing`{Strng} It chnk is a sting,then hi is t\n encoding ype.  Ignor chunks abuff.  Note hat cunk wlln*alas* be abuffer unless the `decoeStrings otn is\n  exlcitly st to `fl`.\n `calbak` {Functin} Clthis funcion (optonallywith anerron arumnt) heyou r one pocessn  suppli chunk.\n\nAll Writabl stram implmentations mst provide a `writeethod o\nsend ta t t nderyin resource\n\nNote **Thi fnionMUT NOTbe calld directy.**  Itsuld be\nimplend by hil clases,d caled by teernal Wte\ncas meds ony\n\nCal he allbak using hetnard`llbc(err)` patter t\signalthat the wre compled successfuly orwith an erro.\n\n the `decodeStrings`flag s setin he contuctr option, thnn`chunk` ma b  tring rater than aBuffer, an `encoing` ill\nicat th sr fstri that t is.  Thiis to suporipemetations thathave n optimizd andlg fr certain trig\ndataencoins.  f you d not explcitly sethedecodStrings`\nopti ofalse`, then you ca safely gnrethe `eoing` argment,\nandasumethat `chunk` will alwae aBufe.\n\nhis mthod is refixed wit an unerore beaue it is interal to\the class that efins it, nd shud not e caled direly y sernprorams.  Her, yu**r** xpected to overide thi method in\nyur own ension class\n\n\n## writbewrie(chunk, [ecoding], [clback)\n\n* chunk{uffer | String} Da to be writn\n `encodng {String} Optinal. I `chunk` s atring, ten encing\n  dfas o `'ut8\n `calac` {Fnction} Optioa. Calld hen ts chuis\ ucssfly writt.\n* Returns {Booean}\\nWrites `chunk` to th stea Returns `tre` if thedta has been\nfluheto the uderlynresource.  Rurn `fase`to indicate that\nthebuffe is full, nd he aa wll be sent outthe futue. h\n`'rain'`event wllnicate whe thuffer is emptyagi.\n\nTe speciicsf whn `write()` will return fase, ideeined by\ne ghWaterMrk` opion provided to the onstruto.\n\### ritab.nd([cunk], [ecoing], [allbk]\n\* `chnk` {ur| Sring Otional fnal daa t be writte\n* `encing {String} pional  If `chunk` i astring, ten encoding\n  defauts to 'ut8'`\n* `callbck` {Functin} Optioal.  Clld hen theial chunk is\n  ccessfuly rtten.\\nCll this mthodo signa he ed of tedaabegwrittn t the\stream.\n###Event:'drain'n\Ed whnt stream rite queue emptiesndit's safe o wri\withut buffering ai. isten or t wen tram.write()` returns\n`fae`\n\n### vn'lose'\\nEmited whe the nrying resorce (f example, thebacki file\ndsciptr) hsbee closed. Nt all steams will et ths.nn### Evet 'finsh'\nWhe `end(` iscalle and he are no more hunksto write,thisneven i emitd.\n\###Event: 'pipe'\nn `uc {adabl Strm\n\nEmited when the steamis ssed tareadabe stream's iemethd.\n\n### Event 'e'nn* `sorce` {Readable tream}\\Emitedwhn  evously established `pipe()` isremve uing th\se Readble srea's `upipe() mehod.\n\n## lasssteam.Duplex\n\n<!-typeclass>\\nA \"ple\"sream se thats oth Raablean ritbl, suh as a\nTC scet connection.\nnNo at `steam.upx`is an bstrctclassesigned tobe\ntendetnunderlyn impeentation of the `_read(size)`\nand `_wrte(cunk, encoding cllbac` mehods as ywouldwithaRedble or\nWitable sream lass.n\nSice JvaSci desn'temutple prototypal inherianc this\nclass pototplly herts frm Radabl,an thenparaiticaly fom\nWrile  It i thuupt the srto iplement both the lowev\n`_readn)` method well as he lowlvel `_write(chun, ncoding, cb`meod\non xtension dupex clsss.\n\n##newstream.Dx(option)n\n `ptios` Obect} Psed tobth riabe nd Readale\n ostrucors. Also haefollowngfields:\n * `alwHalfOpen` Boen}efut=true. f et t `fas`, thn   he strem illaumtially edth redble sde when the\n  wiale sideends a ice vers.\n\nIn classes that extnd te upex cas, make sure to callthe\ncontructor sotht the buffeig setings can b prperly\ninitialzd\nn#Cla:tream.Trasfr\n\nA "trnsfom\ trmisaduplex srm whee the outut i casally\ncnncted insoeway tothe inut, suc as azlb seam or a crpo\nstram.\nnThere is no requremet that th ou bth same size s h inut,\nth sae number of chunks, or arrive at thesme tme.  r examle, \nHah rem will on ver ave  igchunk o outpt whichinrovied when the iputis nded.  A zb stream wileith odc\muh smler r muh arger than itsinput.\n\Rhr than implemn th`_read() and wi()` etho, Tansorm\nclases mu ipleet the `_nsform( metod, ad may optionaly\nso mplement th `_flush()` mehod.  See blw.)\n\### newsream.Transform([options])n\n* `otions` {Objet} Passe to both Writale and Readabl\ncnstrctors.\n\Inclses tt exndthe Transform lss,masre to clthenconstuctr o thathe buffeing settingscan be rperly\niniilized### tranorm.\\transorm(chunk, ncoding, callbc)\n\n* `chunk`{Buffer | trng} The chunk b tnsomed. Wi alwys\  be a buffer unless the `ecdStings optionwa sett `false.n* `encodi` Strig If te hunkis a tri, thn ths is thn  encoding type (Inre if ecodtrings` hunk is  bffr.\n*`allck` {Functon} Call this uncon (optinlywit an error\n argment) when youar don proessingthe supplied cunk.\n\nNt **This fnction MUST Tbe calle irectl.* It shoulde\nimplemend b child clases, and alled the interalTansform\nclas mes only.\n\nAlTrfr strammplementaiosmus povide a `_tansform`\method to ccept inpuand podue utputn`_transfr` shulddo waeve hs o e donen thisspecifi\nTransform cs,o handle tebytes bng written,and pas the off\n e readable ion of the nterfc.  Do synhronos I/O,proess thin, ad so on.\n\nCall`tranormpush(utputCh)` 0 or more tmesto eerate output\nfrm thi input chnk dependigonhow m dtayou want to otputas  elt of this chunk\n\nall theclbck functon only whenthe curenchunk is completely\csumd.  Noe tatthere may or may notbe utpt asa resutof anynparila nput chunk.\\nThs eth preixewth aundersre becaus it is interal to\nthe casstha defis it, ad hould notbe called ctl bysr\nprogram.  However, you ar**epeted tooverie his methd in\nyr owneensin csss.\n\n### transform.\\_flush(calack)\n\* callback` {Fnction}Cal this unctin optonalitanerorn  argumen) whny re doneflushing y remainingdata.\n\nNot: *ThisfncionMUST NO b alled recy.**  tMAY b iplemeed\by childclasses, an i so, il  caled by thnternal Trform\nclas ethod oly.\n\nInsome ases, yorranfom oeratin may nee o eit a bit more\ndata at the endoh trem.  F exampl  `Zlib`copeion\strem wilstre up so intera state sothati ca otmlly\ncompessthe utput   the end, howver,it nest do th bet it\ncan wih ht is lf, soha the data wille cplete.\n\In thosase,yo can impnt  `fluh` methowch will be\callat the ver en, ater all the writtais conumd, but\befoe emittin `en` o signa the endof th raale ide.  ust\lket`tansfrm`,all `transfor.puhchnk) zer or ore\ntime a appopiate, adcall `calbac` hen e lsh operation i\ncmplt.\n\nThis metod is prefie wthan underoe becauseit is iteal tonthe class a define it, and sold ot be called diectly by usernpogrms.  owever, yo **are* expctdto overe this method in\you ow exenso classes.n\n###Exap: `imleProocol` pse\n\nTe xmple bve ofa simpl otocol parser an e imlemnted mch\nmore simp using hehigr eve `Tansform` stream class.n\nIn thi exmpl, rthertha rovidghe inpuas an argument, it\noudbe ppe ito the parser,wh isa  dioao streamnapproach.\n```javascrpt\nnctio SmplProtcl(options) {\nif (!(is instanceof impleProtcol)\n  return new SimpeProtocl(otin);\n\n  Trasorm.callths, options);\n  is.inody = flse;\n this._aFirtCr =false;\  t._rwHad = []\n  thi.heer = null;\n}\nnSimpleProtlprootype = Objectcreat(n  ransm.prototype, {consuctor: { vauSimplePrtool };\n\nSimpleProtcolpotypetrnsfr = functin(chun, encoding done)n  if !tis._inBody {   / chckif the hunkhas \\n\\n\n   ar split = -1;\n   fo vr i= 0i < cuk.enth; i++ {n     if (chunk[] === 10) {// '\\'\n      if (this_sawFirt) {n      splt = i        beak;\n      } else {\n      thi.sawFirtCr = true\      \n    else {\n       tis._swrsCr = false\n     \n   }\n\n   fsplt ==-) \n      / still waiting for the \\n\n\n      // tshtehunk, nd try ain.\n  ths_rawHeader.ushchun);\    ese {n   hs._inody = true;n    var h = unk.sice(0, split);n   tis._wHedr.ph();\    var hader= Bufer.concat(this._rawHeaer).toSrig();\n     try{\n       his.header = JSON.par(hade);\n   } catch (e) {\n       tisei'error, new Erro(invalid smpl protocol dta');\n       run;\n     }\n   // and t te kno tha e re e prsingte header.\n     this.emi('header', thisheader);\n\n     / nw,becase e got someexra data,mit thi firs.\n     thisush(b);n     } else {n   // from reon, ust proide the dtaoou consmera-is.n    hsush(b);\ }n  done(;};\nnvar parser= new SimpleProtcol(;\nsor.pip(parse)\nn// ow parsr s a reaale stram hat wil emit 'header'n/ wh the arse headerda\```\nn\n#Clas: sremPasshruh\nnTis s a tivial implemetation ofa`Trnfom`steamthat imp\nass the input bytesaros o the utpt.  Is purposeis mainlnfo epls ad testin, but here a occasionally use cases where\nit can come in hady.\\n\n[entEmiter] etshtml#events_as_evn_eventemittern",
  ramFlename":"EDM.md,
 bgs":{
    "ur: "ttp:gihub.co/isaac/eadable-streamissues"
 }
  "id:"readable-stream@1.0.17"
  "_fro""reable-tream@~.02"}
